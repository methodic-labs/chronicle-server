/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 */

/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 */

plugins {
    id 'application'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'java'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'com.github.spotbugs' version '5.0.4'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.6.10'
    id 'org.jetbrains.dokka' version '1.6.10'
    id 'com.github.jk1.dependency-license-report' version '1.16'
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
    }
}

description = "Chronicle Server"
group = "com.openlattice"
ext.projectName = "chronicle-server"
ext.scmUrl = 'scm:git:https://github.com/methodic-labs/chronicle-server.git'
ext.connectionUrl = 'scm:git:https://github.com/methodic-labs/chronicle-server.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/methodic-labs/chronicle-server.git'

distTar {
    archiveName "$baseName" + ".tgz"
}

if(!project.hasProperty('developmentMode')) {
    ext.developmentMode = false
}

println projectName + " with developmentMode = " + project.developmentMode

if( project.hasProperty('developmentMode') && project.developmentMode ) {
    apply from: "../gradles/methodic.gradle"
} else {
    apply from: "https://raw.githubusercontent.com/methodic-labs/methodic/main/gradles/methodic.gradle"
}

mainClassName = "com.openlattice.chronicle.ChronicleServer"

def CS_XMS = "$System.env.CHRONICLE_SERVER_XMS"
def CS_XMX = "$System.env.CHRONICLE_SERVER_XMX"
def CS_ARGS = "$System.env.CHRONICLE_SERVER_ARGS"
def PARALLEL = "$System.env.PARALLELISM"
def GC = "$System.env.GC"

if (CS_XMS == 'null' || CS_XMS == null || CS_XMS == "") {
    CS_XMS = '-Xms1g'
}

if (CS_XMX == 'null' || CS_XMX == null || CS_XMX == "") {
    CS_XMX = '-Xms4g'
}

if (CS_ARGS == 'null' || CS_ARGS == null || CS_ARGS == "") {
    CS_ARGS = 'local postgres medialocal'
}


if (PARALLEL == 'null' || PARALLEL == null || PARALLEL == "") {
    PARALLEL = "-Djava.util.concurrent.ForkJoinPool.common.parallelism=" + Runtime.runtime.availableProcessors()
}

if (GC == 'null' || GC == null || GC == "") {
    GC = "-XX:+UseG1GC"
}

println "Using java args for running ${projectName}: Xms=" + CS_XMS + ",Xmx=" + CS_XMX + " -server"

applicationDefaultJvmArgs = [CS_XMS, CS_XMX, "-server", GC, PARALLEL]
applicationDefaultJvmArgs += [ "--add-modules", "java.base",
                               "--add-modules", "java.se",
                               "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                               "--add-opens","java.base/java.lang=ALL-UNNAMED",
                               "--add-opens","java.base/java.nio=ALL-UNNAMED",
                               "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                               "--add-opens","java.management/sun.management=ALL-UNNAMED",
                               "--add-opens", "jdk.management/com.ibm.lang.management.internal=ALL-UNNAMED",
                               "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

jacoco {
    toolVersion = "${jacoco_tool_version}"
}

tasks.withType(Javadoc) {
    enabled = false
}

spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

run {
    if (CS_ARGS != null) {
        args CS_ARGS.split();
    } else if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

println "Enabled profiles: " + Arrays.toString(run.args)

configurations {
    tests
    published.extendsFrom tests, archives
}

checkstyle {
    toolVersion = '7.4'
    showViolations = false
    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        config project.resources.text.fromFile("../gradles/checkstyle.xml")
    } else {
        config project.resources.text.fromUri('https://raw.githubusercontent.com/methodic-labs/methodic/main/gradles/checkstyle.xml')
    }
}

import com.github.jk1.license.render.InventoryHtmlReportRenderer

licenseReport {
    renderers = [new InventoryHtmlReportRenderer()]
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

test {
    ignoreFailures = true
}

ext.odata_version = '4.2.0'
ext.chronicle_api_version = '0.0.17'

dependencies {
    //Spotbugs related
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    implementation "com.google.guava:guava:${guava_version}"
    implementation "com.amazon.redshift:redshift-jdbc42:2.1.0.3"
    implementation "org.apache.commons:commons-text:${commonsText_version}"

    implementation group: "com.twilio.sdk", name: "twilio", version: "8.21.0"
    implementation "org.dmfs:lib-recur:0.10.2"

    if (project.hasProperty('developmentMode') && project.developmentMode) {
        logger.quiet(project.name + " using project dependencies.")
        implementation project(":rhizome")
      //  implementation project(":api")
        implementation(project(":chronicle-api")) {
            exclude group: 'com.google.guava', module: 'guava'
        }
        testImplementation(project(path: ":rhizome", configuration: "tests"))
        testImplementation(project(path: ":rhizome-client", configuration: "tests"))
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        implementation "com.openlattice:rhizome:${rhizome_version}"
    //    implementation "com.openlattice:api:${api_version}"
        implementation("com.openlattice:chronicle-api:${chronicle_api_version}") {
            exclude group: 'com.google.guava', module: 'guava'
        }
        testImplementation "com.geekbeast:rhizome:${rhizome_version}:tests"
        testImplementation "com.geekbeast:rhizome-client:${rhizome_client_version}:tests"
    }

    /*
     * TESTING
     */
    testImplementation "junit:junit:${junit_version}"
    //testImplementation "com.openlattice:conductor-client:${conductor_client_version}"
    testImplementation("org.mockito:mockito-all:${mockito_version}") {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs+= ["--add-modules", "java.base",
                            "--add-modules", "java.se",
                            "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED"]
}

tasks.withType(Test) {
    jvmArgs += ["--add-modules", "java.base",
                "--add-modules", "java.se",
                "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                "--add-opens","java.base/java.lang=ALL-UNNAMED",
                "--add-opens","java.base/java.nio=ALL-UNNAMED",
                "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                "--add-opens","java.management/sun.management=ALL-UNNAMED",
                "--add-opens", "jdk.management/com.ibm.lang.management.internal=ALL-UNNAMED",
                "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}

jar {
    doFirst {
        manifest {
            attributes (
                    "Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(" "),
                    "Main-Class": mainClassName
            )
        }
    }
}

startScripts {
    classpath = files(jar.archiveFile.get().asFile) + classpath.filter { it.getName().startsWith("rhizome") && !it.getName().contains("client") }
}