/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 */

/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 */

plugins {
    id 'application'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'signing'
    id "org.jetbrains.kotlin.jvm" version "1.2.30"
}

description = "Chronicle Server"
group = "com.openlattice"
ext.projectName = "chronicle-server"
ext.scmUrl = 'scm:git:https://github.com/openlattice/chronicle-server.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/chronicle-server.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/chronicle-server.git'

distTar {
    archiveName "$baseName" + ".tgz"
}

apply from: "https://raw.githubusercontent.com/openlattice/gradles/master/openlattice.gradle"
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

jacoco {
    toolVersion = "0.8.2"
}

mainClassName = "com.openlattice.chronicle.ChronicleServer"

def CS_XMS = "$System.env.CHRONICLE_SERVER_XMS"
def CS_XMX = "$System.env.CHRONICLE_SERVER_XMX"
def CS_ARGS = "$System.env.CHRONICLE_SERVER_ARGS"
def PARALLEL = "$System.env.PARALLELISM"
def GC = "$System.env.GC"

if (CS_XMS == 'null' || CS_XMS == null || CS_XMS == "") {
    CS_XMS = '-Xms1g'
}

if (CS_XMX == 'null' || CS_XMX == null || CS_XMX == "") {
    CS_XMX = '-Xms4g'
}

if (CS_ARGS == 'null' || CS_ARGS == null || CS_ARGS == "") {
    CS_ARGS = 'local postgres'
}


if (PARALLEL == 'null' || PARALLEL == null || PARALLEL == "") {
    PARALLEL = "-Djava.util.concurrent.ForkJoinPool.common.parallelism=" + Runtime.runtime.availableProcessors()
}

if (GC == 'null' || GC == null || GC == "") {
    GC = "-XX:+UseG1GC"
}

println "Using java args for running ${projectName}: Xms=" + CS_XMS + ",Xmx=" + CS_XMX + " -server"

applicationDefaultJvmArgs = [CS_XMS, CS_XMX, "-server", GC, PARALLEL]
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

run {
    if (CS_ARGS != null) {
        args CS_ARGS.split();
    } else if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

println "Enabled profiles: " + Arrays.toString(run.args)

configurations {
    tests
    published.extendsFrom tests, archives
}

ext.odata_version = '4.2.0'
ext.chronicle_api_version = '0.0.6-SNAPSHOT'
dependencies {
    compile "com.google.guava:guava:${guava_version}"

    if (project.hasProperty('developmentMode') && project.developmentMode) {
        logger.quiet(project.name + " using project dependencies.")
        compile project(":rhizome")
        compile project(":api")
        compile(project(":chronicle-api")) {
            exclude group: 'com.google.guava', module: 'guava'
        }
        compile(project(":shuttle")) {
            exclude module: 'apache-curator'
            exclude module: 'slf4j-log4j12'
            exclude module: 'hadoop-mapreduce-client-core'
            exclude module: 'hadoop-common'
        }
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        compile "com.openlattice:rhizome:${rhizome_version}"
        compile "com.openlattice:api:${api_version}"
        compile("com.openlattice:chronicle-api:${chronicle_api_version}") {
            exclude group: 'com.google.guava', module: 'guava'
        }
        compile("com.openlattice:shuttle:0.0.2-SNAPSHOT") {
            exclude module: 'apache-curator'
            exclude module: 'slf4j-log4j12'
            exclude module: 'hadoop-mapreduce-client-core'
            exclude module: 'hadoop-common'
        }

        testCompile "com.openlattice:chronicle-api:${chronicle_api_version}:tests"
        testCompile "com.openlattice:rhizome:${rhizome_version}:tests"
        testCompile "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }

    compile "org.apache.olingo:odata-server-api:${odata_version}"
    compile "org.apache.olingo:odata-server-core:${odata_version}"
    compile "org.apache.olingo:odata-commons-api:${odata_version}"
    compile "org.apache.olingo:odata-commons-core:${odata_version}"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    /*
     * TESTING
     */
    testCompile "junit:junit:${junit_version}"
    testCompile "com.openlattice:conductor-client:${conductor_client_version}"
    testCompile("org.mockito:mockito-all:${mockito_version}") {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility = JavaVersion.VERSION_1_8
    ext.targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
