/*
 * Copyright (C) 2019. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 *
 */

package com.openlattice.chronicle.auditing

import com.fasterxml.jackson.annotation.JsonProperty
import com.openlattice.chronicle.authorization.AclKey
import com.openlattice.chronicle.authorization.principals.Principals
import com.openlattice.chronicle.util.JsonFields.*
import java.time.OffsetDateTime
import java.util.*

/**
 * Represents an auditable event in the system. Will be mostly generated by backend, but can be submitted from the
 * front end.
 *
 * @param securablePrincipalId The id of the securable principal that took the action.
 * @param principalId (Optional) The text based principal of the principal that took the action. Useful for auth0 lookups
 * @param aclKey The acl key of the securable object involved in the event.
 * @param study (Optional) The study for this auditable event
 * @param organization (Optional) The organization for this auditable event
 * @param eventType The [AuditEventType] of this event.
 * @param description A description of the event.
 * @param data Represents additional data relevant to the event. May be properly indexed by ES in the future.
 * @param timestamp Represents the instant in time at which an auditable event occured. The current time is assumed if
 * none is provided.
 */
data class AuditableEvent(
    @JsonProperty(ACL_KEY) val aclKey: AclKey,
    @JsonProperty(SECURABLE_PRINCIPAL) val securablePrincipalId: UUID = Principals.getCurrentSecurablePrincipal().id,
    @JsonProperty(PRINCIPAL) val principalId: String = Principals.getCurrentUser().id,
    @JsonProperty(EVENT_TYPE) val eventType: AuditEventType,
    @JsonProperty(DESCRIPTION_FIELD) val description: String = "",
    @JsonProperty(STUDY_ID) val study: UUID = UUID(0, 0),
    @JsonProperty(ORGANIZATION_ID) val organization: UUID = UUID(0, 0),
    @JsonProperty(DATA) val data: Map<String, Any> = mapOf(),
    @JsonProperty(TIMESTAMP) val timestamp: OffsetDateTime = OffsetDateTime.now(),
)